$fn=100;

FLOOR = 1;
WALL = 1;
BASE_H= 3;

CLIP_H = 1.4;

BOX_H = 115;
BOX_W = 305;
BOX_D = 305;

// Upper tray for large minis
UPPER_MINI_MAX_H = 74;
UPPER_TRAY_H = FLOOR + UPPER_MINI_MAX_H; // 75mm
UPPER_TRAY_W = 140;
UPPER_TRAY_D = 131;

// Lower tray for small minis
LOWER_MINI_MAX_H = 47;
LOWER_TRAY_W = 200;
LOWER_TRAY_D = 200;
LOWER_TRAY_H  = FLOOR + LOWER_MINI_MAX_H; // 48mm
LOWER_TRAY_UPPER_H = BOX_H - UPPER_TRAY_H; // 40mm

// Terrain tiles
LARGE_TERRAIN_TILE_W = 217;
LARGE_TERRAIN_TILE_D = 115;
LARGE_TERRAIN_TILE_H = 9; // stack

SMALL_TERRAIN_TILE_W = 115;
SMALL_TERRAIN_TILE_D = 115;
SMALL_TERRAIN_TILE_H = 68;

TERRAIN_FLOOR = 1;
TERRAIN_SUPPORT = 3;
TERRAIN_WALL = 3;
TERRAIN_PEG_EDGE = 20;

SMALL_TERRAIN_TILES = 32;
LARGE_TERRAIN_TILES = 4;

SMALL_TERRAIN_BASE_W = SMALL_TERRAIN_TILE_W*2;
SMALL_TERRAIN_BASE_D = SMALL_TERRAIN_TILE_D;
SMALL_TERRAIN_BASE_H = SMALL_TERRAIN_TILE_H/2 + TERRAIN_SUPPORT + 9;

LARGE_TERRAIN_BASE_W = LARGE_TERRAIN_TILE_W;
LARGE_TERRAIN_BASE_D = LARGE_TERRAIN_TILE_D;
LARGE_TERRAIN_BASE_H = LARGE_TERRAIN_TILE_H + TERRAIN_SUPPORT + 9;

TERRAIN_V_WALL = 2;
TERRAIN_TAB_W = 6;
TERRAIN_TAB_D = 16;
TERRAIN_V_SUPPORT_W = TERRAIN_TAB_W + 25;

SMALL_TERRAIN_BOX_W = SMALL_TERRAIN_TILE_W + TERRAIN_V_WALL*2 + 4;
SMALL_TERRAIN_BOX_D = SMALL_TERRAIN_TILE_H + TERRAIN_V_WALL*2 + 5;
SMALL_TERRAIN_BOX_H = SMALL_TERRAIN_TILE_D/2 + TERRAIN_V_WALL + TERRAIN_TAB_D;

LARGE_TERRAIN_BOX_W = LARGE_TERRAIN_TILE_W + TERRAIN_V_WALL*2 + 4;
LARGE_TERRAIN_BOX_D = LARGE_TERRAIN_TILE_H + TERRAIN_V_WALL*2 + 5;
LARGE_TERRAIN_BOX_H = LARGE_TERRAIN_TILE_D/2 + TERRAIN_V_WALL + TERRAIN_TAB_D;

// Cards
CARD_W = 64;
CARD_D = 89;
CARD_STACK = 30;

CARD_WALL = 1.5;
CARD_EDGE_WALL = CLIP_H + 2;

CARD_BOX_W = CARD_W + CARD_EDGE_WALL*2 + 2;
CARD_BOX_D = CARD_STACK + CARD_WALL*2 + 5;
CARD_BOX_H = CARD_D / 3 * 2 + CARD_WALL;

CARD_BOX_LID_H = CARD_D / 3 + CARD_WALL + 5;




// A small file to allow clips to made to provide a cover where required
include <clips.scad>

use <MCAD/boxes.scad>

module roundedCube(size, radius, sidesonly) {
    translate([size[0]/2, size[1]/2, size[2]/2]) roundedBox(size, radius, sidesonly);
}
